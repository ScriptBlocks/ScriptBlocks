<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%- include("head.ejs") %>
    <title>Ribbon Menu</title>
    <style>
        /* Your existing styles */
        main {
            padding-top: 30px;
        }
        header.ribbon {
            background-color: #333;
            color: white;
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1000;
            height: 30px;
            display: flex;
            align-items: center;
        }
        .ribbon-menu {
            display: flex;
            justify-content: left;
            width: 100%;
        }
        .ribbon-menu ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
        }
        .ribbon-menu li {
            position: relative;
        }
        .ribbon-menu a {
            color: white;
            text-decoration: none;
            padding: 0 15px;
            display: flex;
            align-items: center;
            height: 100%;
            font-size: 1.2rem;
            transition: background-color 0.3s;
            cursor: pointer;
        }
        .ribbon-menu a:hover {
            background-color: #444;
        }
        .ribbon-menu .dropdown {
            display: none;
            position: absolute;
            background-color: #444;
            top: 100%;
            left: 0;
            min-width: 150px;
            border-radius: 4px;
            box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
            z-index: 1001;
        }
        .ribbon-menu .dropdown li {
            border-bottom: 1px solid #555;
            padding: 0 10px;
            display: flex;
            justify-content: space-between;
        }
        .ribbon-menu .dropdown li:last-child {
            border-bottom: none;
        }
        .ribbon-menu .dropdown a {
            padding: 10px 0;
            flex-grow: 1;
        }
        .ribbon-menu .dropdown span.shortcut {
            color: #bbb;
            font-size: 0.8rem;
            margin-left: 10px;
            white-space: nowrap;
        }
    </style>
</head>
<body>
    <header class="ribbon">
        <nav class="ribbon-menu">
            <ul id="menu-items">
                <li><a id="file-menu">File</a></li>
                <li><a id="edit-menu">Edit</a></li>
                <li><a id="view-menu">View</a></li>
                <li><a id="help-menu">Help</a></li>
                <li><a id="plugins-menu">Plugins</a></li>
                <li><a id="play-button" onclick="generatePythonCode()"><img src="/assets/play.svg" alt="Play Icon"/></a></li>
            </ul>
        </nav>
    </header>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const menuItems = [
                {
                    id: 'file-menu',
                    items: [
                        { label: 'New Project', shortcut: 'Ctrl+N', action: () => alert("New Project action") },
                        { label: 'Open Folder', shortcut: 'Ctrl+Shift+O', action: () => alert("Open Folder action") },
                        { label: 'Settings', shortcut: 'Ctrl+I', action: () => alert("Settings action") }
                    ]
                },
                {
                    id: 'edit-menu',
                    items: [
                        { label: 'Copy', shortcut: 'Ctrl+C', action: () => alert("Copy action") },
                        { label: 'Paste', shortcut: 'Ctrl+V', action: () => alert("Paste action") }
                    ]
                },
                {
                    id: 'help-menu',
                    items: [
                        { label: 'Discord', link: 'https://discord.gg/dgzx3Yg4xY' },
                        { label: 'Create an Issue', link: 'https://github.com/ScriptBlocks/ScriptBlocks/issues/new' }
                    ]
                },
                {
                    id: 'plugins-menu',
                    items: [
                        { label: 'Search for Plugins', action: () => alert("Search for Plugins action") }
                    ]
                }
            ];

            function toggleDropdown(menuItem) {
                document.querySelectorAll('.dropdown').forEach(dropdown => dropdown.remove());
                
                const dropdown = document.createElement('ul');
                dropdown.classList.add('dropdown');
                
                menuItems.find(m => m.id === menuItem.id).items.forEach(option => {
                    const listItem = document.createElement('li');
                    const anchor = document.createElement('a');
                    anchor.textContent = option.label;

                    if (option.link) {
                        anchor.href = option.link;
                        anchor.target = "_blank";
                    } else if (option.action) {
                        anchor.href = "#";
                        anchor.addEventListener('click', (e) => {
                            e.preventDefault();
                            option.action();
                        });
                    }

                    listItem.appendChild(anchor);

                    if (option.shortcut) {
                        const shortcutSpan = document.createElement('span');
                        shortcutSpan.textContent = option.shortcut;
                        shortcutSpan.classList.add('shortcut');
                        listItem.appendChild(shortcutSpan);
                    }

                    dropdown.appendChild(listItem);
                });

                menuItem.parentElement.appendChild(dropdown);
                dropdown.style.display = 'block';
            }

            document.querySelectorAll('.ribbon-menu a').forEach(menuItem => {
                menuItem.addEventListener('click', (event) => {
                    event.preventDefault();
                    toggleDropdown(menuItem);
                });
            });

            document.addEventListener('click', (event) => {
                if (!event.target.closest('.ribbon-menu')) {
                    document.querySelectorAll('.dropdown').forEach(dropdown => dropdown.style.display = 'none');
                }
            });

            // Function to inject new dropdowns from plugins
            window.injectPluginMenu = (pluginName, menuItems) => {
                const pluginsMenu = menuItems.find(m => m.id === 'plugins-menu');
                if (pluginsMenu) {
                    menuItems.push({
                        id: `${pluginName}-menu`,
                        items: menuItems
                    });

                    const newMenuItem = document.createElement('li');
                    newMenuItem.innerHTML = `<a id="${pluginName}-menu">${pluginName}</a>`;
                    document.getElementById('menu-items').appendChild(newMenuItem);

                    // Add event listener for the new menu item
                    newMenuItem.querySelector('a').addEventListener('click', (event) => {
                        event.preventDefault();
                        toggleDropdown(newMenuItem);
                    });
                }
            };
        });
    </script>    
</body>
</html>
