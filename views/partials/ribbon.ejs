<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%- include("head.ejs") %>
    <title>Ribbon Menu</title>
    <style>
        header.ribbon {
            background-color: #333;
            color: white;
            position: fixed;
            top: 0;
            width: 100%;
            z-index: 1000;
            height: 30px;
            display: flex;
            align-items: center;
        }
        .ribbon-menu {
            display: flex;
            justify-content: left;
            width: 100%;
        }
        .ribbon-menu ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
        }
        .ribbon-menu li {
            position: relative;
        }
        .ribbon-menu a {
            color: white;
            text-decoration: none;
            padding: 0 15px;
            display: flex;
            align-items: center;
            height: 100%;
            font-size: 1.2rem;
            transition: background-color 0.3s;
            cursor: pointer;
        }
        .ribbon-menu a img {
            margin-right: 8px; /* Add space between icon and text */
        }
        .ribbon-menu a:hover {
            background-color: #444;
        }
        .ribbon-menu .dropdown {
            display: none;
            position: absolute;
            background-color: #444;
            top: 100%;
            left: 0;
            border-radius: 4px;
            box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
            z-index: 1001;
        }
        .ribbon-menu .dropdown li {
            padding: 0 10px;
            display: flex;
            justify-content: space-between;
            border-bottom: 1px solid #555;
            min-width: 150px;
            white-space: nowrap;
        }
        .ribbon-menu .dropdown li:last-child {
            border-bottom: none;
        }
        .ribbon-menu .dropdown a {
            padding: 10px 0;
            flex-grow: 1;
            white-space: nowrap;
        }
        .ribbon-menu .dropdown span.shortcut {
            color: #bbb;
            font-size: 0.8rem;
            margin-left: 10px;
        }
        main {
            margin-top: 30px;
        }
    </style>
</head>
<body>
    <header class="ribbon">
        <nav class="ribbon-menu">
            <ul id="menu-items">
                <li><a id="file-menu">File</a></li>
                <li><a id="edit-menu">Edit</a></li>
                <li><a id="view-menu">View</a></li>
                <li><a id="help-menu">Help</a></li>
                <li><a id="plugins-menu">Plugins</a></li>
                <li><a id="play-button" onclick="generatePythonCode()"><img src="/assets/play.svg" alt="Play Icon"/></a></li>
            </ul>
        </nav>
    </header>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const menuItems = [
                {
                    id: 'file-menu',
                    items: [
                        { label: 'New Project', icon: 'bi bi-plus', shortcut: 'Ctrl+N', action: () => alert("New Project action") },
                        { label: 'Open Folder', icon: 'bi bi-folder2-open', shortcut: 'Ctrl+Shift+O', action: () => alert("Open Folder action") },
                        { label: 'Settings', icon: 'bi bi-gear', shortcut: 'Ctrl+I', action: () => alert("Settings action") }
                    ]
                },
                {
                    id: 'edit-menu',
                    items: [
                        { label: 'Copy', icon: 'bi bi-copy', shortcut: 'Ctrl+C', action: () => alert("Copy action") },
                        { label: 'Paste', icon: 'bi bi-clipboard', shortcut: 'Ctrl+V', action: () => alert("Paste action") }
                    ]
                },
                {
                    id: 'help-menu',
                    items: [
                        { label: 'Discord', icon: 'bi bi-discord', link: 'https://discord.gg/dgzx3Yg4xY' },
                        { label: 'Create an Issue', icon: 'bi bi-github', link: 'https://github.com/ScriptBlocks/ScriptBlocks/issues/new' }
                    ]
                },
                {
                    id: 'plugins-menu',
                    items: [
                        { label: 'Search for Plugins', icon: 'bi bi-search', action: () => alert("Search for Plugins action") }
                    ]
                }
            ];

            function toggleDropdown(menuItem) {
                document.querySelectorAll('.dropdown').forEach(dropdown => dropdown.remove());
                
                const dropdown = document.createElement('ul');
                dropdown.classList.add('dropdown');
                
                const selectedMenu = menuItems.find(m => m.id === menuItem.id);
                if (selectedMenu) {
                    selectedMenu.items.forEach(option => {
                        const listItem = document.createElement('li');
                        const anchor = document.createElement('a');

                        // Add icon and label with spacing
                        if (option.icon) {
                            const iconElement = document.createElement('i');
                            iconElement.className = option.icon;
                            iconElement.style.marginRight = '8px';
                            anchor.appendChild(iconElement);
                        }
                        anchor.appendChild(document.createTextNode(option.label));

                        if (option.link) {
                            anchor.href = option.link;
                            anchor.target = "_blank";
                        } else if (option.action) {
                            anchor.href = "#";
                            anchor.addEventListener('click', (e) => {
                                e.preventDefault();
                                option.action();
                            });
                        }

                        listItem.appendChild(anchor);

                        if (option.shortcut) {
                            const shortcutSpan = document.createElement('span');
                            shortcutSpan.innerHTML = option.shortcut;
                            shortcutSpan.classList.add('shortcut');
                            listItem.appendChild(shortcutSpan);
                        }

                        dropdown.appendChild(listItem);
                    });
                }

                menuItem.parentElement.appendChild(dropdown);
                dropdown.style.display = 'block';
            }

            document.querySelectorAll('.ribbon-menu a').forEach(menuItem => {
                menuItem.addEventListener('click', (event) => {
                    event.preventDefault();
                    toggleDropdown(menuItem);
                });
            });

            document.addEventListener('click', (event) => {
                if (!event.target.closest('.ribbon-menu')) {
                    document.querySelectorAll('.dropdown').forEach(dropdown => dropdown.style.display = 'none');
                }
            });

            window.injectPluginMenu = (pluginName, items) => {
                const pluginsMenu = menuItems.find(m => m.id === 'plugins-menu');
                if (pluginsMenu) {
                    items.forEach(item => {
                        const newItem = {
                            label: item.label,
                            icon: item.icon,
                            action: item.action || (() => alert(`${item.label} action not defined`)),
                            shortcut: item.shortcut,
                            link: item.link
                        };
                        pluginsMenu.items.push(newItem);
                    });

                    const newMenuItem = document.createElement('li');
                    newMenuItem.innerHTML = `<a id="${pluginName}-menu">${pluginName}</a>`;
                    document.getElementById('menu-items').appendChild(newMenuItem);

                    newMenuItem.querySelector('a').addEventListener('click', (event) => {
                        event.preventDefault();
                        toggleDropdown(newMenuItem);
                    });
                }
            };
        });
    </script>
</body>
</html>